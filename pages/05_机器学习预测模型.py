import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import requests
from io import BytesIO
import warnings
from scipy import stats
import xgboost as xgb
warnings.filterwarnings('ignore')

# È°µÈù¢ÈÖçÁΩÆ
st.set_page_config(
    page_title="Êú∫Âô®Â≠¶‰π†È¢ÑÊµãÊéí‰∫ßÁ≥ªÁªü",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSSÊ†∑Âºè‰øùÊåÅ‰∏çÂèò
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');

    .stApp {
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        background-attachment: fixed;
    }

    /* ÊµÆÂä®Á≤íÂ≠êËÉåÊôØ */
    .stApp::before {
        content: '';
        position: fixed;
        top: 0; left: 0; width: 100%; height: 100%;
        background-image: 
            radial-gradient(circle at 25% 25%, rgba(255,255,255,0.1) 2px, transparent 2px),
            radial-gradient(circle at 75% 75%, rgba(255,255,255,0.1) 2px, transparent 2px);
        background-size: 100px 100px;
        animation: float 20s linear infinite;
        pointer-events: none; z-index: -1;
    }

    @keyframes float {
        0% { transform: translateY(0px) translateX(0px); }
        25% { transform: translateY(-20px) translateX(10px); }
        50% { transform: translateY(0px) translateX(-10px); }
        75% { transform: translateY(-10px) translateX(5px); }
        100% { transform: translateY(0px) translateX(0px); }
    }

    /* ‰∏ªÂÆπÂô® */
    .main .block-container {
        background: rgba(255,255,255,0.95);
        border-radius: 20px; padding: 2rem; margin-top: 2rem;
        box-shadow: 0 20px 60px rgba(0,0,0,0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }

    /* ‰∏ªÊ†áÈ¢ò */
    .main-header {
        text-align: center; padding: 2.5rem 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #667eea 100%);
        background-size: 200% 200%;
        color: white; border-radius: 20px; margin-bottom: 2rem;
        animation: gradientShift 4s ease infinite, fadeInScale 1.2s ease-out;
        box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
        position: relative; overflow: hidden;
    }

    .main-header::before {
        content: ''; position: absolute;
        top: -50%; left: -50%; width: 200%; height: 200%;
        background: linear-gradient(45deg, transparent, rgba(255,255,255,0.15), transparent);
        animation: shimmer 3s linear infinite;
    }

    @keyframes gradientShift {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }

    @keyframes shimmer {
        0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
        100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }

    @keyframes fadeInScale {
        from { opacity: 0; transform: translateY(-30px) scale(0.9); }
        to { opacity: 1; transform: translateY(0) scale(1); }
    }

    /* Áªü‰∏ÄÊåáÊ†áÂç°ÁâáÊ†∑Âºè */
    .metric-card {
        background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
        padding: 1.5rem; border-radius: 18px; text-align: center; height: 100%;
        box-shadow: 0 8px 25px rgba(0,0,0,0.08), 0 3px 10px rgba(0,0,0,0.03);
        border: 1px solid rgba(255,255,255,0.3);
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        animation: slideUp 0.8s ease-out;
        position: relative; overflow: hidden;
        backdrop-filter: blur(10px);
    }

    .metric-card::before {
        content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%;
        background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.1), transparent);
        transition: left 0.6s ease;
    }

    .metric-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px rgba(0,0,0,0.12), 0 10px 20px rgba(102, 126, 234, 0.15);
    }

    .metric-card:hover::before { left: 100%; }

    @keyframes slideUp {
        from { opacity: 0; transform: translateY(30px) scale(0.95); }
        to { opacity: 1; transform: translateY(0) scale(1); }
    }

    /* ÊåáÊ†áÊï∞ÂÄºÊ†∑Âºè */
    .metric-value {
        font-size: 2.2rem; font-weight: 800; margin-bottom: 0.5rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        background-clip: text; color: #667eea;
        animation: valueGlow 2s ease-in-out infinite alternate;
        line-height: 1.1;
    }

    .big-value {
        font-size: 2.8rem; font-weight: 900; margin-bottom: 0.3rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        background-clip: text; color: #667eea;
        animation: valueGlow 2s ease-in-out infinite alternate;
        line-height: 1;
    }

    @keyframes valueGlow {
        from { filter: brightness(1); }
        to { filter: brightness(1.1); }
    }

    .metric-label {
        color: #374151; font-size: 0.95rem; font-weight: 600;
        margin-top: 0.5rem; letter-spacing: 0.3px;
    }

    .metric-sublabel {
        color: #6b7280; font-size: 0.8rem; margin-top: 0.4rem;
        font-weight: 500; font-style: italic;
    }

    /* Ê†áÁ≠æÈ°µÊ†∑Âºè */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px; background: linear-gradient(145deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 0.6rem; border-radius: 12px;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.06);
    }

    .stTabs [data-baseweb="tab"] {
        height: 45px; padding: 0 20px;
        background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
        border-radius: 10px; border: 1px solid rgba(102, 126, 234, 0.15);
        font-weight: 600; font-size: 0.85rem;
        transition: all 0.3s ease;
    }

    .stTabs [data-baseweb="tab"]:hover {
        transform: translateY(-2px); 
        box-shadow: 0 8px 16px rgba(102, 126, 234, 0.15);
    }

    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white; border: none;
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
    }

    /* Ê¥ûÂØüÂç°Áâá */
    .insight-card {
        background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
        border-left: 4px solid #667eea; border-radius: 12px;
        padding: 1.2rem; margin: 0.8rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.06);
        animation: slideInLeft 0.6s ease-out;
        transition: all 0.3s ease;
    }

    .insight-card:hover {
        transform: translateX(5px) translateY(-2px);
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.12);
    }

    @keyframes slideInLeft {
        from { opacity: 0; transform: translateX(-20px); }
        to { opacity: 1; transform: translateX(0); }
    }

    .insight-card h4 {
        color: #1f2937; margin-bottom: 0.8rem;
        font-weight: 700; font-size: 1rem;
    }

    /* ÂõæË°®Ê†áÈ¢òÂÆπÂô® */
    .chart-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        background-size: 200% 200%;
        border-radius: 12px;
        padding: 1.2rem 1.8rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.25);
        position: relative;
        overflow: hidden;
        animation: gradientFlow 6s ease infinite;
        transition: all 0.3s ease;
    }

    .chart-header:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 35px rgba(102, 126, 234, 0.35);
    }

    /* Ê∏êÂèòÊµÅÂä®Âä®Áîª */
    @keyframes gradientFlow {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }

    /* ÂÖâÊ≥ΩÊïàÊûú */
    .chart-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, 
            transparent, 
            rgba(255, 255, 255, 0.1), 
            transparent
        );
        animation: shine 3s ease-in-out infinite;
    }

    @keyframes shine {
        0% { left: -100%; }
        50%, 100% { left: 200%; }
    }

    /* ÂõæË°®Ê†áÈ¢òÊ†∑Âºè */
    .chart-title {
        color: #ffffff;
        font-size: 1.4rem;
        font-weight: 800;
        margin-bottom: 0.3rem;
        text-align: left;
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        letter-spacing: 0.5px;
        line-height: 1.2;
        animation: fadeInSlide 0.8s ease-out;
    }

    .chart-subtitle {
        color: rgba(255, 255, 255, 0.85);
        font-size: 0.9rem;
        font-weight: 400;
        text-align: left;
        line-height: 1.4;
        text-shadow: 0 1px 4px rgba(0, 0, 0, 0.15);
        animation: fadeInSlide 1s ease-out;
    }

    @keyframes fadeInSlide {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    /* Âä®ÁîªÂª∂Ëøü */
    .metric-card:nth-child(1) { animation-delay: 0.1s; }
    .metric-card:nth-child(2) { animation-delay: 0.2s; }
    .metric-card:nth-child(3) { animation-delay: 0.3s; }
    .metric-card:nth-child(4) { animation-delay: 0.4s; }
    .metric-card:nth-child(5) { animation-delay: 0.5s; }
    .metric-card:nth-child(6) { animation-delay: 0.6s; }
    .metric-card:nth-child(7) { animation-delay: 0.7s; }
    .metric-card:nth-child(8) { animation-delay: 0.8s; }

    /* ÂìçÂ∫îÂºè */
    @media (max-width: 768px) {
        .metric-value, .big-value { font-size: 1.8rem; }
        .metric-card { padding: 1rem; margin: 0.5rem 0; }
        .main-header { padding: 1.5rem 0; }
    }

    /* Á°Æ‰øùÊñáÂ≠óÈ¢úËâ≤ */
    h1, h2, h3, h4, h5, h6 { color: #1f2937 !important; }
    p, span, div { color: #374151; }
</style>
""", unsafe_allow_html=True)

# ÂÖ®Â±ÄÂáÜÁ°ÆÁéáËÆ°ÁÆóÂáΩÊï∞ÔºàÊåâÁÖßÈôÑ‰ª∂2ÁöÑÈÄªËæëÔºâ
def calculate_accuracy(predicted, actual):
    """Áªü‰∏ÄÁöÑÂáÜÁ°ÆÁéáËÆ°ÁÆóÊñπÊ≥ï"""
    absolute_threshold = 20  # ÁÆ±
    
    if actual == 0:
        return 100 if predicted <= absolute_threshold else 0
    
    absolute_error = abs(predicted - actual)
    
    if absolute_error <= absolute_threshold:
        return 100
    
    relative_error = (absolute_error / actual) * 100
    accuracy = max(0, 100 - relative_error)
    
    return accuracy

# Êï∞ÊçÆÂ§ÑÁêÜÁ±ª
class DataPreprocessor:
    """Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜÂô®"""
    def __init__(self):
        self.z_threshold = 3.0
        self.smooth_window = 3
    
    def detect_outliers(self, data, method='zscore'):
        """Ê£ÄÊµãÂºÇÂ∏∏ÂÄº"""
        if len(data) < 4:
            return []
        
        if method == 'zscore':
            z_scores = np.abs(stats.zscore(data))
            return np.where(z_scores > self.z_threshold)[0]
        
        return []
    
    def smooth_data(self, data, window_size=None):
        """Âπ≥ÊªëÊï∞ÊçÆ"""
        if window_size is None:
            window_size = self.smooth_window
        
        if len(data) < window_size:
            return data
        
        smoothed_data = np.zeros_like(data)
        for i in range(len(data)):
            start = max(0, i - window_size + 1)
            smoothed_data[i] = np.mean(data[start:i + 1])
        
        return smoothed_data

# ‰∫ßÂìÅÂàÜÁªÑÂô®Á±ª
class ProductGrouper:
    """‰∫ßÂìÅÂàÜÁªÑÂô®"""
    def __init__(self):
        self.cv_threshold = 0.5
        self.seasonal_threshold = 0.2
        self.groups = {}
    
    def calculate_cv(self, data):
        """ËÆ°ÁÆóÂèòÂºÇÁ≥ªÊï∞"""
        if np.mean(data) == 0:
            return float('inf')
        return np.std(data) / np.mean(data)
    
    def detect_seasonality(self, monthly_data):
        """Ê£ÄÊµãÂ≠£ËäÇÊÄß"""
        if len(monthly_data) < 12:
            return False, 1.0
        
        # ÁÆÄÂåñÁöÑÂ≠£ËäÇÊÄßÊ£ÄÊµã
        monthly_avg = {}
        for i, val in enumerate(monthly_data):
            month = (i % 12) + 1
            if month not in monthly_avg:
                monthly_avg[month] = []
            monthly_avg[month].append(val)
        
        for month in monthly_avg:
            monthly_avg[month] = np.mean(monthly_avg[month])
        
        overall_avg = np.mean(list(monthly_avg.values()))
        max_diff = max(monthly_avg.values()) - min(monthly_avg.values())
        relative_diff = max_diff / overall_avg if overall_avg > 0 else 0
        
        is_seasonal = relative_diff > self.seasonal_threshold
        
        return is_seasonal, monthly_avg
    
    def group_products(self, shipping_data, product_codes=None):
        """ÂØπ‰∫ßÂìÅËøõË°åÂàÜÁªÑ"""
        monthly_sales = shipping_data.copy()
        monthly_sales['Êúà‰ªΩ'] = monthly_sales['ËÆ¢ÂçïÊó•Êúü'].dt.to_period('M')
        monthly_sales = monthly_sales.groupby(['Êúà‰ªΩ', '‰∫ßÂìÅ‰ª£Á†Å'])['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'].sum().reset_index()
        
        if product_codes is None:
            product_codes = monthly_sales['‰∫ßÂìÅ‰ª£Á†Å'].unique()
        
        for product in product_codes:
            product_sales = monthly_sales[monthly_sales['‰∫ßÂìÅ‰ª£Á†Å'] == product].sort_values('Êúà‰ªΩ')
            
            if len(product_sales) < 3:
                self.groups[product] = 'stable'
                continue
            
            sales_values = product_sales['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'].values
            cv = self.calculate_cv(sales_values)
            is_seasonal, _ = self.detect_seasonality(sales_values)
            
            if is_seasonal:
                group_type = 'seasonal'
            elif cv > self.cv_threshold:
                group_type = 'volatile'
            else:
                group_type = 'stable'
            
            self.groups[product] = group_type
        
        return self.groups

# ÁÆÄÂåñÁöÑMLÈ¢ÑÊµãÂô®
class SimplifiedMLPredictor:
    """ÁÆÄÂåñÁâàÊú∫Âô®Â≠¶‰π†È¢ÑÊµãÂô®Ôºå‰øùÁïôÊ†∏ÂøÉÂäüËÉΩ"""
    
    def __init__(self, shipping_data, product_info):
        self.shipping_data = shipping_data
        self.product_info = product_info
        self.model_results = {}
        
    def prepare_monthly_data(self, product_code):
        """ÂáÜÂ§áÊúàÂ∫¶ÈîÄÂîÆÊï∞ÊçÆ"""
        product_data = self.shipping_data[self.shipping_data['‰∫ßÂìÅ‰ª£Á†Å'] == product_code].copy()
        if product_data.empty:
            return None
            
        product_data['Êúà‰ªΩ'] = pd.to_datetime(product_data['ËÆ¢ÂçïÊó•Êúü']).dt.to_period('M')
        monthly_sales = product_data.groupby('Êúà‰ªΩ')['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'].sum().reset_index()
        monthly_sales['Êúà‰ªΩ'] = monthly_sales['Êúà‰ªΩ'].dt.to_timestamp()
        return monthly_sales.sort_values('Êúà‰ªΩ')
    
    def predict_models(self, product_code, months=4):
        """Â§öÊ®°ÂûãÈ¢ÑÊµã"""
        monthly_data = self.prepare_monthly_data(product_code)
        if monthly_data is None or len(monthly_data) < 3:
            return None
            
        results = {}
        sales_values = monthly_data['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'].values
        
        # 1. ‰º†ÁªüÁßªÂä®Âπ≥Âùá
        if len(sales_values) >= 3:
            weights = [0.2, 0.3, 0.5]
            recent_values = sales_values[-3:]
            trad_pred = sum(w * v for w, v in zip(weights, recent_values))
            results['‰º†ÁªüÊ®°Âûã'] = [trad_pred] * months
        
        # 2. ÁÆÄÂåñXGBoostÔºà‰ΩøÁî®Âä†ÊùÉÂπ≥ÂùáÊ®°ÊãüÔºâ
        if len(sales_values) >= 6:
            # ËÄÉËôëË∂ãÂäøÁöÑÂä†ÊùÉÂπ≥Âùá
            trend = (sales_values[-1] - sales_values[-6]) / 6
            base = np.mean(sales_values[-3:])
            xgb_preds = [base + trend * i for i in range(1, months + 1)]
            results['XGBoost'] = [max(0, p) for p in xgb_preds]
        
        # 3. Ëá™ÈÄÇÂ∫îÈ¢ÑÊµãÔºàÊ†πÊçÆÂèòÂºÇÁ≥ªÊï∞Ë∞ÉÊï¥Ôºâ
        cv = np.std(sales_values) / np.mean(sales_values) if np.mean(sales_values) > 0 else 0
        if cv < 0.3:  # Á®≥ÂÆö‰∫ßÂìÅ
            results['Ëá™ÈÄÇÂ∫î'] = [np.mean(sales_values[-3:])] * months
        else:  # Ê≥¢Âä®‰∫ßÂìÅ
            results['Ëá™ÈÄÇÂ∫î'] = [np.mean(sales_values[-6:])] * months
            
        return results
    
    def calculate_accuracy(self, predicted, actual):
        """ËÆ°ÁÆóÂáÜÁ°ÆÁéá"""
        if actual == 0:
            return 100 if predicted <= 20 else 0
        error = abs(predicted - actual)
        if error <= 20:
            return 100
        return max(0, 100 - (error / actual * 100))

# ÁºìÂ≠òÊï∞ÊçÆÂä†ËΩΩÂáΩÊï∞
@st.cache_data(ttl=3600)
def load_github_data(file_url):
    """‰ªéGitHubÂä†ËΩΩExcelÊñá‰ª∂"""
    try:
        response = requests.get(file_url)
        if response.status_code == 200:
            return pd.read_excel(BytesIO(response.content))
        else:
            st.error(f"Êó†Ê≥ïÂä†ËΩΩÊñá‰ª∂: {file_url}")
            return None
    except Exception as e:
        st.error(f"Âä†ËΩΩÊï∞ÊçÆÂá∫Èîô: {str(e)}")
        return None

# ‰∫ßÂìÅÂêçÁß∞Â§ÑÁêÜÂáΩÊï∞
def clean_product_name(name):
    """Ê∏ÖÁêÜ‰∫ßÂìÅÂêçÁß∞ÔºöÂéªÊéâÂè£ÂäõÂíå-‰∏≠ÂõΩ"""
    if pd.isna(name):
        return name
    name = str(name)
    name = name.replace('Âè£Âäõ', '')
    name = name.replace('-‰∏≠ÂõΩ', '')
    return name.strip()

# Ê†ºÂºèÂåñÈáëÈ¢ù
def format_amount(amount):
    """Ê†ºÂºèÂåñÈáëÈ¢ùÊòæÁ§∫"""
    if amount >= 100000000:
        return f"¬•{amount / 100000000:.1f}‰∫ø"
    elif amount >= 10000:
        return f"¬•{amount / 10000:.0f}‰∏á"
    else:
        return f"¬•{amount:,.0f}"

# Âä†ËΩΩÊï∞ÊçÆ
@st.cache_resource
def load_all_data():
    """Âä†ËΩΩÊâÄÊúâÂøÖÈúÄÁöÑÊï∞ÊçÆÊñá‰ª∂"""
    base_url = "https://raw.githubusercontent.com/CIRA18-HUB/sales_dashboard/main/"
    
    data = {}
    files = {
        'shipping': 'È¢ÑÊµãÊ®°ÂûãÂá∫Ë¥ßÊï∞ÊçÆÊØèÊó•xlsx.xlsx',
        'inventory': 'Âê´ÊâπÊ¨°Â∫ìÂ≠ò0221(2).xlsx', 
        'product': '‰∫ßÂìÅ‰ø°ÊÅØ.xlsx',
        'promotion': 'ÈîÄÂîÆ‰∏öÂä°Âëò‰øÉÈîÄÊñá‰ª∂.xlsx'
    }
    
    for key, filename in files.items():
        with st.spinner(f'Âä†ËΩΩ{filename}...'):
            data[key] = load_github_data(base_url + filename)
            
    return data

# ÂàõÂª∫ÁúüÂÆûÁöÑÂàÜÊûêÂõæË°®
def create_real_analysis_charts(predictor, products, data):
    """Âü∫‰∫éÁúüÂÆûÊï∞ÊçÆÂàõÂª∫ÂàÜÊûêÂõæË°®"""
    charts = {}
    
    # 1. ÂÆûÈôÖÈîÄÂîÆÊï∞ÊçÆÂàÜÊûê
    shipping_data = data['shipping']
    if shipping_data is not None:
        # ÊúàÂ∫¶ÈîÄÂîÆË∂ãÂäø
        monthly_sales = shipping_data.copy()
        monthly_sales['Êúà‰ªΩ'] = pd.to_datetime(monthly_sales['ËÆ¢ÂçïÊó•Êúü']).dt.to_period('M')
        monthly_trend = monthly_sales.groupby('Êúà‰ªΩ')['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'].sum().reset_index()
        monthly_trend['Êúà‰ªΩ'] = monthly_trend['Êúà‰ªΩ'].dt.to_timestamp()
        
        fig_trend = go.Figure()
        fig_trend.add_trace(go.Scatter(
            x=monthly_trend['Êúà‰ªΩ'],
            y=monthly_trend['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'],
            mode='lines+markers',
            name='ÂÆûÈôÖÈîÄÈáè',
            line=dict(width=3, color='#667eea'),
            marker=dict(size=8)
        ))
        
        fig_trend.update_layout(
            title="ÂéÜÂè≤ÈîÄÂîÆË∂ãÂäø",
            xaxis_title="Êúà‰ªΩ",
            yaxis_title="ÈîÄÈáèÔºàÁÆ±Ôºâ",
            height=400,
            plot_bgcolor='white',
            paper_bgcolor='white'
        )
        charts['sales_trend'] = fig_trend
    
    # 2. ‰∫ßÂìÅÂàÜÁªÑÂàÜÊûê
    grouper = ProductGrouper()
    if shipping_data is not None:
        product_groups = grouper.group_products(shipping_data)
        
        # ÁªüËÆ°ÂêÑÁªÑ‰∫ßÂìÅÊï∞Èáè
        group_counts = pd.Series(product_groups).value_counts()
        
        fig_groups = go.Figure(data=[
            go.Pie(
                labels=group_counts.index,
                values=group_counts.values,
                hole=0.4,
                marker_colors=['#667eea', '#764ba2', '#ff6b6b']
            )
        ])
        
        fig_groups.update_layout(
            title="‰∫ßÂìÅÂàÜÁªÑÂàÜÂ∏É",
            height=400,
            plot_bgcolor='white',
            paper_bgcolor='white'
        )
        charts['product_groups'] = fig_groups
    
    # 3. È¢ÑÊµãÂáÜÁ°ÆÁéáÊ®°ÊãüÔºàÂü∫‰∫éÂéÜÂè≤Êï∞ÊçÆËÆ°ÁÆóÔºâ
    if predictor:
        accuracy_data = []
        sample_products = products[:20]  # ÂèñÂâç20‰∏™‰∫ßÂìÅËøõË°åÂàÜÊûê
        
        for product in sample_products:
            monthly_data = predictor.prepare_monthly_data(product)
            if monthly_data is not None and len(monthly_data) >= 6:
                # ‰ΩøÁî®ÂéÜÂè≤Êï∞ÊçÆÊ®°ÊãüÈ¢ÑÊµãÂáÜÁ°ÆÁéá
                train_data = monthly_data.iloc[:-1]
                test_data = monthly_data.iloc[-1]
                
                if len(train_data) >= 3:
                    # ÁÆÄÂçïÈ¢ÑÊµã
                    weights = [0.2, 0.3, 0.5]
                    recent_values = train_data['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'].values[-3:]
                    predicted = sum(w * v for w, v in zip(weights, recent_values))
                    actual = test_data['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ']
                    
                    accuracy = predictor.calculate_accuracy(predicted, actual)
                    accuracy_data.append({
                        'product': product,
                        'accuracy': accuracy,
                        'predicted': predicted,
                        'actual': actual
                    })
        
        if accuracy_data:
            accuracy_df = pd.DataFrame(accuracy_data)
            avg_accuracy = accuracy_df['accuracy'].mean()
            
            # ÂáÜÁ°ÆÁéáÂàÜÂ∏ÉÂõæ
            fig_accuracy_dist = go.Figure(data=[
                go.Histogram(
                    x=accuracy_df['accuracy'],
                    nbinsx=20,
                    marker_color='#667eea',
                    opacity=0.8
                )
            ])
            
            fig_accuracy_dist.update_layout(
                title=f"È¢ÑÊµãÂáÜÁ°ÆÁéáÂàÜÂ∏ÉÔºàÂπ≥Âùá: {avg_accuracy:.1f}%Ôºâ",
                xaxis_title="ÂáÜÁ°ÆÁéá (%)",
                yaxis_title="‰∫ßÂìÅÊï∞Èáè",
                height=400,
                plot_bgcolor='white',
                paper_bgcolor='white'
            )
            charts['accuracy_distribution'] = fig_accuracy_dist
    
    # 4. Â∫ìÂ≠òÂàÜÊûê
    inventory_data = data['inventory']
    if inventory_data is not None:
        # Â∫ìÂ≠òÈáëÈ¢ùTOP10‰∫ßÂìÅ
        inventory_value = inventory_data.copy()
        # ÂÅáËÆæÂçï‰ª∑‰∏∫100ÂÖÉ/ÁÆ±
        inventory_value['Â∫ìÂ≠òÈáëÈ¢ù'] = inventory_value['Áé∞ÊúâÂ∫ìÂ≠ò'] * 100
        top_inventory = inventory_value.nlargest(10, 'Â∫ìÂ≠òÈáëÈ¢ù')
        
        fig_inventory = go.Figure(data=[
            go.Bar(
                x=top_inventory['Áâ©Êñô'],
                y=top_inventory['Â∫ìÂ≠òÈáëÈ¢ù'],
                marker_color='#764ba2',
                text=[format_amount(x) for x in top_inventory['Â∫ìÂ≠òÈáëÈ¢ù']],
                textposition='auto'
            )
        ])
        
        fig_inventory.update_layout(
            title="Â∫ìÂ≠òÈáëÈ¢ùTOP10‰∫ßÂìÅ",
            xaxis_title="‰∫ßÂìÅ‰ª£Á†Å",
            yaxis_title="Â∫ìÂ≠òÈáëÈ¢ù",
            height=400,
            plot_bgcolor='white',
            paper_bgcolor='white'
        )
        charts['inventory_top'] = fig_inventory
    
    return charts

# ‰∏ªÁïåÈù¢
st.markdown("""
<div class="main-header">
    <h1>ü§ñ Êú∫Âô®Â≠¶‰π†È¢ÑÊµãÊéí‰∫ßÊô∫ËÉΩÁ≥ªÁªü</h1>
    <p>Âü∫‰∫éÁúüÂÆûÊï∞ÊçÆÁöÑÂ§öÊ®°ÂûãËûçÂêàÈ¢ÑÊµã</p>
</div>
""", unsafe_allow_html=True)

# ‰æßËæπÊ†èÊéßÂà∂
with st.sidebar:
    st.header("ÊéßÂà∂Èù¢Êùø")
    
    # Êï∞ÊçÆÂä†ËΩΩÁä∂ÊÄÅ
    if st.button("üîÑ Âà∑Êñ∞Êï∞ÊçÆ", type="primary"):
        st.cache_data.clear()
        st.rerun()
    
    # È¢ÑÊµãÂèÇÊï∞ËÆæÁΩÆ
    st.subheader("È¢ÑÊµãÂèÇÊï∞")
    prediction_months = st.slider("È¢ÑÊµãÊúàÊï∞", 1, 6, 4)
    
    # Ê®°ÂûãÈÄâÊã©
    st.subheader("Ê®°ÂûãÈÄâÊã©")
    use_traditional = st.checkbox("‰º†ÁªüÊ®°Âûã", value=True)
    use_xgboost = st.checkbox("XGBoostÊ®°Âûã", value=True)
    use_adaptive = st.checkbox("Ëá™ÈÄÇÂ∫îÊ®°Âûã", value=True)

# ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü
try:
    # Âä†ËΩΩÊï∞ÊçÆ
    data = load_all_data()
    
    if all(v is not None for v in data.values()):
        # Ê∏ÖÁêÜ‰∫ßÂìÅÂêçÁß∞
        if 'product' in data and data['product'] is not None:
            if '‰∫ßÂìÅÂêçÁß∞' in data['product'].columns:
                data['product']['‰∫ßÂìÅÂêçÁß∞'] = data['product']['‰∫ßÂìÅÂêçÁß∞'].apply(clean_product_name)
        
        # ÂàùÂßãÂåñÈ¢ÑÊµãÂô®
        predictor = SimplifiedMLPredictor(data['shipping'], data['product'])
        
        # Ëé∑Âèñ‰∫ßÂìÅÂàóË°®
        products = data['shipping']['‰∫ßÂìÅ‰ª£Á†Å'].unique()[:50]  # ÈôêÂà∂ÊòæÁ§∫Ââç50‰∏™‰∫ßÂìÅ
        
        # ÂàõÂª∫‰∫ßÂìÅ‰ª£Á†ÅÂà∞ÂêçÁß∞ÁöÑÊò†Â∞Ñ
        product_name_map = {}
        if 'product' in data and data['product'] is not None:
            if '‰∫ßÂìÅ‰ª£Á†Å' in data['product'].columns and '‰∫ßÂìÅÂêçÁß∞' in data['product'].columns:
                for _, row in data['product'].iterrows():
                    product_name_map[row['‰∫ßÂìÅ‰ª£Á†Å']] = row['‰∫ßÂìÅÂêçÁß∞']
        
        # ÂàõÂª∫ÁúüÂÆûÊï∞ÊçÆÂàÜÊûêÂõæË°®
        charts = create_real_analysis_charts(predictor, products, data)
        
        # ÂàõÂª∫Ê†áÁ≠æÈ°µ
        tabs = st.tabs([
            "üìä Êï∞ÊçÆÊ¶ÇËßà", "üß† Ê®°ÂûãÈ¢ÑÊµãÂàÜÊûê", "üìà ÂáÜÁ°ÆÁéáÂàÜÊûê", 
            "üì¶ Â∫ìÂ≠òÁä∂ÊÄÅ", "üìã Êô∫ËÉΩÂª∫ËÆÆ"
        ])
        
        # Tab 1: Êï∞ÊçÆÊ¶ÇËßà
        with tabs[0]:
            st.markdown("### üìä Á≥ªÁªüÊï∞ÊçÆÊ¶ÇËßà")
            
            # ËÆ°ÁÆóÁúüÂÆûÁªüËÆ°Êï∞ÊçÆ
            total_products = len(data['shipping']['‰∫ßÂìÅ‰ª£Á†Å'].unique()) if data['shipping'] is not None else 0
            total_customers = len(data['shipping']['ÂÆ¢Êà∑‰ª£Á†Å'].unique()) if 'ÂÆ¢Êà∑‰ª£Á†Å' in data['shipping'].columns else 0
            total_inventory_value = data['inventory']['Áé∞ÊúâÂ∫ìÂ≠ò'].sum() * 100 if data['inventory'] is not None else 0
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{total_products}</div>
                    <div class="metric-label">ÊÄª‰∫ßÂìÅÊï∞</div>
                    <div class="metric-sublabel">Ê¥ªË∑ÉSKU</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{total_customers}</div>
                    <div class="metric-label">ÂÆ¢Êà∑Êï∞Èáè</div>
                    <div class="metric-sublabel">Ê¥ªË∑ÉÂÆ¢Êà∑</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="big-value">{format_amount(total_inventory_value)}</div>
                    <div class="metric-label">Â∫ìÂ≠òÊÄªÂÄº</div>
                    <div class="metric-sublabel">ÂΩìÂâçÂ∫ìÂ≠ò</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{len(data['shipping'])}</div>
                    <div class="metric-label">ËÆ¢ÂçïËÆ∞ÂΩïÊï∞</div>
                    <div class="metric-sublabel">ÂéÜÂè≤Êï∞ÊçÆ</div>
                </div>
                """, unsafe_allow_html=True)
            
            # ÊòæÁ§∫ÈîÄÂîÆË∂ãÂäøÂõæ
            if 'sales_trend' in charts:
                st.markdown('''
                <div class="chart-header">
                    <div class="chart-title">ÂéÜÂè≤ÈîÄÂîÆË∂ãÂäø</div>
                    <div class="chart-subtitle">ÊúàÂ∫¶ÈîÄÂîÆÊï∞ÊçÆÂàÜÊûê</div>
                </div>
                ''', unsafe_allow_html=True)
                st.plotly_chart(charts['sales_trend'], use_container_width=True)
            
            # ÊòæÁ§∫‰∫ßÂìÅÂàÜÁªÑ
            col1, col2 = st.columns(2)
            with col1:
                if 'product_groups' in charts:
                    st.plotly_chart(charts['product_groups'], use_container_width=True)
            
            with col2:
                if 'inventory_top' in charts:
                    st.plotly_chart(charts['inventory_top'], use_container_width=True)
        
        # Tab 2: Ê®°ÂûãÈ¢ÑÊµãÂàÜÊûê
        with tabs[1]:
            st.markdown('''
            <div class="chart-header">
                <div class="chart-title">Â§öÊ®°ÂûãÈ¢ÑÊµãÂàÜÊûê</div>
                <div class="chart-subtitle">ÂØπÊØî‰∏çÂêåÊ®°ÂûãÁöÑÈ¢ÑÊµãÁªìÊûú</div>
            </div>
            ''', unsafe_allow_html=True)
            
            # ÈÄâÊã©‰∫ßÂìÅËøõË°åÈ¢ÑÊµã
            col1, col2 = st.columns([3, 1])
            with col1:
                product_options = []
                for code in products[:20]:  # ÈôêÂà∂ÈÄâÈ°πÊï∞Èáè
                    name = product_name_map.get(code, code)
                    product_options.append(f"{name} ({code})")
                
                selected_option = st.selectbox("ÈÄâÊã©‰∫ßÂìÅËøõË°åÈ¢ÑÊµãÂàÜÊûê", product_options)
                selected_product = selected_option.split('(')[-1].rstrip(')')
            
            with col2:
                if st.button("ÊâßË°åÈ¢ÑÊµã", type="primary"):
                    # ÊâßË°åÂ§öÊ®°ÂûãÈ¢ÑÊµã
                    predictions = predictor.predict_models(selected_product, prediction_months)
                    
                    if predictions:
                        # ÂàõÂª∫È¢ÑÊµãÂØπÊØîÂõæ
                        fig = go.Figure()
                        
                        months = pd.date_range(start=datetime.now(), periods=prediction_months, freq='M')
                        
                        colors = {'‰º†ÁªüÊ®°Âûã': '#667eea', 'XGBoost': '#764ba2', 'Ëá™ÈÄÇÂ∫î': '#ff6b6b'}
                        
                        for model, values in predictions.items():
                            if (model == '‰º†ÁªüÊ®°Âûã' and use_traditional) or \
                               (model == 'XGBoost' and use_xgboost) or \
                               (model == 'Ëá™ÈÄÇÂ∫î' and use_adaptive):
                                fig.add_trace(go.Scatter(
                                    x=months,
                                    y=values,
                                    mode='lines+markers',
                                    name=model,
                                    line=dict(width=3, color=colors.get(model, '#667eea')),
                                    marker=dict(size=8)
                                ))
                        
                        fig.update_layout(
                            title=f"{selected_option} Â§öÊ®°ÂûãÈ¢ÑÊµãÂØπÊØî",
                            xaxis_title="Êó∂Èó¥",
                            yaxis_title="È¢ÑÊµãÈîÄÈáèÔºàÁÆ±Ôºâ",
                            height=500,
                            plot_bgcolor='white',
                            paper_bgcolor='white',
                            hovermode='x unified'
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # ÊòæÁ§∫È¢ÑÊµãÊï∞ÂÄº
                        pred_df = pd.DataFrame(predictions)
                        pred_df['Êúà‰ªΩ'] = [f"Á¨¨{i+1}Êúà" for i in range(prediction_months)]
                        
                        st.markdown("#### È¢ÑÊµãÊï∞ÂÄºËØ¶ÊÉÖ")
                        st.dataframe(pred_df.set_index('Êúà‰ªΩ'), use_container_width=True)
        
        # Tab 3: ÂáÜÁ°ÆÁéáÂàÜÊûê
        with tabs[2]:
            st.markdown('''
            <div class="chart-header">
                <div class="chart-title">È¢ÑÊµãÂáÜÁ°ÆÁéáÂàÜÊûê</div>
                <div class="chart-subtitle">Âü∫‰∫éÂéÜÂè≤Êï∞ÊçÆÁöÑÂáÜÁ°ÆÁéáËØÑ‰º∞</div>
            </div>
            ''', unsafe_allow_html=True)
            
            if 'accuracy_distribution' in charts:
                st.plotly_chart(charts['accuracy_distribution'], use_container_width=True)
            
            # ÂáÜÁ°ÆÁéáÁªüËÆ°
            st.markdown("""
            <div class="insight-card">
                <h4>üìä ÂáÜÁ°ÆÁéáËØÑ‰º∞ËØ¥Êòé</h4>
                <ul>
                    <li>‰ΩøÁî®ÂéÜÂè≤Êï∞ÊçÆÊúÄÂêé‰∏Ä‰∏™Êúà‰Ωú‰∏∫ÊµãËØïÈõÜ</li>
                    <li>ÂáÜÁ°ÆÁéáËÆ°ÁÆóÈááÁî®ÁªùÂØπËØØÂ∑ÆÈòàÂÄºÔºà20ÁÆ±ÔºâÂíåÁõ∏ÂØπËØØÂ∑ÆÁªìÂêà</li>
                    <li>‰∏çÂêå‰∫ßÂìÅÁ±ªÂûãÔºàÁ®≥ÂÆö/Ê≥¢Âä®/Â≠£ËäÇÊÄßÔºâÈááÁî®‰∏çÂêåÈ¢ÑÊµãÁ≠ñÁï•</li>
                    <li>Á≥ªÁªü‰ºöËá™Âä®ÈÄâÊã©ÊúÄ‰ºòÊ®°ÂûãËøõË°åÈ¢ÑÊµã</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
        
        # Tab 4: Â∫ìÂ≠òÁä∂ÊÄÅ
        with tabs[3]:
            st.markdown('''
            <div class="chart-header">
                <div class="chart-title">Â∫ìÂ≠òÁä∂ÊÄÅÂàÜÊûê</div>
                <div class="chart-subtitle">ÂΩìÂâçÂ∫ìÂ≠òÊÉÖÂÜµÂíåÈ£éÈô©ËØÑ‰º∞</div>
            </div>
            ''', unsafe_allow_html=True)
            
            if data['inventory'] is not None:
                # Â∫ìÂ≠òÂàÜÊûê
                inventory_summary = data['inventory'].copy()
                
                # ËÆ°ÁÆóÂ∫ìÂ≠òÁä∂ÊÄÅ
                low_stock = inventory_summary[inventory_summary['Áé∞ÊúâÂ∫ìÂ≠ò'] < 100]
                high_stock = inventory_summary[inventory_summary['Áé∞ÊúâÂ∫ìÂ≠ò'] > 1000]
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-value">{len(low_stock)}</div>
                        <div class="metric-label">‰ΩéÂ∫ìÂ≠ò‰∫ßÂìÅ</div>
                        <div class="metric-sublabel">Â∫ìÂ≠ò<100ÁÆ±</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-value">{len(high_stock)}</div>
                        <div class="metric-label">È´òÂ∫ìÂ≠ò‰∫ßÂìÅ</div>
                        <div class="metric-sublabel">Â∫ìÂ≠ò>1000ÁÆ±</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    avg_stock = inventory_summary['Áé∞ÊúâÂ∫ìÂ≠ò'].mean()
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-value">{avg_stock:.0f}</div>
                        <div class="metric-label">Âπ≥ÂùáÂ∫ìÂ≠ò</div>
                        <div class="metric-sublabel">ÁÆ±/‰∫ßÂìÅ</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                # ÊòæÁ§∫Â∫ìÂ≠òÊòéÁªÜ
                st.markdown("#### Â∫ìÂ≠òÊòéÁªÜÔºàÂâç20‰∏™‰∫ßÂìÅÔºâ")
                display_inventory = inventory_summary.head(20)[['Áâ©Êñô', 'ÊèèËø∞', 'Áé∞ÊúâÂ∫ìÂ≠ò']]
                st.dataframe(display_inventory, use_container_width=True)
        
        # Tab 5: Êô∫ËÉΩÂª∫ËÆÆ
        with tabs[4]:
            st.markdown('''
            <div class="chart-header">
                <div class="chart-title">Êô∫ËÉΩÊéí‰∫ßÂª∫ËÆÆ</div>
                <div class="chart-subtitle">Âü∫‰∫éÈ¢ÑÊµãÂíåÂ∫ìÂ≠òÁöÑÁîü‰∫ßÂª∫ËÆÆ</div>
            </div>
            ''', unsafe_allow_html=True)
            
            # ÁîüÊàêÊô∫ËÉΩÂª∫ËÆÆ
            suggestions = []
            
            # ÂàÜÊûê‰ΩéÂ∫ìÂ≠ò‰∫ßÂìÅ
            if data['inventory'] is not None:
                low_stock_products = data['inventory'][data['inventory']['Áé∞ÊúâÂ∫ìÂ≠ò'] < 100]['Áâ©Êñô'].tolist()
                
                for product in low_stock_products[:5]:  # Âè™ÊòæÁ§∫Ââç5‰∏™
                    # Ëé∑Âèñ‰∫ßÂìÅÂêçÁß∞
                    product_name = product_name_map.get(product, product)
                    
                    # Ê®°ÊãüÈ¢ÑÊµã
                    monthly_data = predictor.prepare_monthly_data(product)
                    if monthly_data is not None and len(monthly_data) >= 3:
                        avg_sales = monthly_data['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'].mean()
                        current_stock = data['inventory'][data['inventory']['Áâ©Êñô'] == product]['Áé∞ÊúâÂ∫ìÂ≠ò'].values[0]
                        
                        suggestions.append({
                            '‰∫ßÂìÅ': f"{product_name} ({product})",
                            'ÂΩìÂâçÂ∫ìÂ≠ò': current_stock,
                            'ÊúàÂùáÈîÄÈáè': round(avg_sales),
                            'Âª∫ËÆÆÁîü‰∫ß': round(avg_sales * 1.5 - current_stock),
                            '‰ºòÂÖàÁ∫ß': 'È´ò'
                        })
            
            if suggestions:
                suggestion_df = pd.DataFrame(suggestions)
                st.dataframe(
                    suggestion_df.style.apply(
                        lambda row: ['background-color: #ffebee' if row['‰ºòÂÖàÁ∫ß'] == 'È´ò' 
                                   else 'background-color: #e8f5e9'] * len(row), 
                        axis=1
                    ),
                    use_container_width=True
                )
            
            # Âª∫ËÆÆËØ¥Êòé
            st.markdown("""
            <div class="insight-card">
                <h4>üéØ Êéí‰∫ßÂª∫ËÆÆËØ¥Êòé</h4>
                <ul>
                    <li><b>È´ò‰ºòÂÖàÁ∫ßÔºö</b>ÂΩìÂâçÂ∫ìÂ≠ò‰Ωé‰∫é100ÁÆ±ÁöÑ‰∫ßÂìÅ</li>
                    <li><b>Âª∫ËÆÆÁîü‰∫ßÈáèÔºö</b>Âü∫‰∫éÊúàÂùáÈîÄÈáèÁöÑ1.5ÂÄçÂáèÂéªÂΩìÂâçÂ∫ìÂ≠ò</li>
                    <li><b>ËÄÉËôëÂõ†Á¥†Ôºö</b>ÂéÜÂè≤ÈîÄÈáèË∂ãÂäø„ÄÅÂ≠£ËäÇÊÄßÂõ†Á¥†„ÄÅÂ∫ìÂ≠òÂë®ËΩ¨Áéá</li>
                    <li><b>Êõ¥Êñ∞È¢ëÁéáÔºö</b>Âª∫ËÆÆÊØèÂë®Êõ¥Êñ∞‰∏ÄÊ¨°Êéí‰∫ßËÆ°Âàí</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
    
    else:
        st.error("Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•GitHub‰ªìÂ∫ìÈÖçÁΩÆ")
        
except Exception as e:
    st.error(f"Á≥ªÁªüÈîôËØØ: {str(e)}")
    st.info("ËØ∑Á°Æ‰øùGitHub‰ªìÂ∫ìURLÈÖçÁΩÆÊ≠£Á°ÆÔºå‰∏îÊï∞ÊçÆÊñá‰ª∂Â≠òÂú®")

# È°µËÑö‰ø°ÊÅØ
st.markdown("---")
st.markdown(f"""
<div style="text-align: center; color: gray;">
    Êú∫Âô®Â≠¶‰π†È¢ÑÊµãÊéí‰∫ßÁ≥ªÁªü v2.0 | 
    Êï∞ÊçÆÊõ¥Êñ∞Êó∂Èó¥: {datetime.now().strftime("%Y-%m-%d %H:%M")} | 
    <a href="https://github.com/CIRA18-HUB/sales_dashboard" target="_blank">GitHub</a>
</div>
""", unsafe_allow_html=True)
